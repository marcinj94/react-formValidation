{"version":3,"sources":["components/Form/Form.js","components/ErrorMessages/ErrorMessages.js","components/SendMessage/SendMessage.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","_props$state","state","username","surname","email","password","accept","react_default","a","createElement","noValidate","onSubmit","submit","htmlFor","type","name","placeholder","id","onChange","change","value","checked","className","ErrorMessages","_props$errors","errors","_props$errorMessages","errorMessages","wrongUsername","wrongSurname","wrongEmail","wrongPassword","wrongAccept","Fragment","SendMessage","message","App","handleChange","e","target","_this","setState","Object","defineProperty","formValidation","allCorrect","length","indexOf","handleSubmit","preventDefault","validation","console","log","_this2","this","setTimeout","components_ErrorMessages_ErrorMessages","components_Form_Form","components_SendMessage_SendMessage","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.381917d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css'\r\n\r\nconst Form = (props) => {\r\n\r\n    const { username, surname, email, password, accept } = props.state;\r\n\r\n    return (\r\n        <form noValidate onSubmit={props.submit}>\r\n            <label htmlFor=\"name\">\r\n                Name:\r\n                <input type=\"text\" name=\"username\" placeholder=\"Your name\" id=\"name\" onChange={props.change} value={username} />\r\n            </label>\r\n            <label htmlFor=\"surname\">\r\n                Surname:\r\n                <input type=\"text\" name=\"surname\" placeholder=\"Your surname\" id=\"surname\" onChange={props.change} value={surname} />\r\n            </label>\r\n            <label htmlFor=\"email\">\r\n                E-mail:\r\n                <input type=\"email\" name=\"email\" placeholder=\"Your e-mail address\" id=\"email\" onChange={props.change} value={email} />\r\n            </label>\r\n            <label htmlFor=\"password\">\r\n                Password:\r\n                <input type=\"password\" name=\"password\" placeholder=\"Your password\" id=\"password\" onChange={props.change} value={password} />\r\n            </label>\r\n            <label htmlFor=\"accept\">\r\n                <input type=\"checkbox\" name=\"accept\" id=\"accept\" onChange={props.change} checked={accept} />\r\n                I would like to receive exclusive offers that may be of interest to me.\r\n            </label>\r\n            <button className=\"btn\">Register</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport './ErrorMessages.css'\r\n\r\nconst ErrorMessages = (props) => {\r\n\r\n    const { username, surname, email, password, accept } = props.errors;\r\n\r\n    const { wrongUsername, wrongSurname, wrongEmail, wrongPassword, wrongAccept } = props.errorMessages;\r\n\r\n    const value = (username || surname || email || password || accept) ?\r\n        <div className=\"errorMessages\">\r\n            <h2 className=\"errorMessages__title\">Something went wrong!</h2>\r\n            {username && <span>{wrongUsername}</span>}\r\n            {surname && <span>{wrongSurname}</span>}\r\n            {email && <span>{wrongEmail}</span>}\r\n            {password && <span>{wrongPassword}</span>}\r\n            {accept && <span>{wrongAccept}</span>}\r\n        </div> : null;\r\n\r\n    return (\r\n        <>\r\n            {value}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ErrorMessages;","import React from 'react';\r\nimport './SendMessage.css'\r\n\r\nconst SendMessage = (props) => {\r\n    return (\r\n        <>\r\n            {props.message && <p className=\"sendMessage\">{props.message}</p>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SendMessage;","import React, { Component } from 'react';\nimport Form from './Form/Form';\nimport './App.css'\nimport ErrorMessages from './ErrorMessages/ErrorMessages';\nimport SendMessage from './SendMessage/SendMessage';\n\nclass App extends Component {\n\n  state = {\n    username: '',\n    surname: '',\n    email: '',\n    password: '',\n    accept: false,\n    message: '',\n    errors: {\n      username: false,\n      surname: false,\n      email: false,\n      password: false,\n      accept: false,\n    }\n  }\n\n  errorMessages = {\n    wrongUsername: \"Name need 8 characters minimum (without space).\",\n    wrongSurname: \"Surname should countaint between 8 and 20 characters (without space).\",\n    wrongEmail: \"E-mail is invalid! example: [xy@zxyz.com].\",\n    wrongPassword: \"Password should containt 8 characters minumum.\",\n    wrongAccept: \"You need to accept exclusive offers.\"\n\n\n  }\n\n  handleChange = (e) => {\n\n    const name = e.target.name;\n    const type = e.target.type;\n\n    if (type === \"text\" || type === \"email\" || type === \"password\") {\n      this.setState({\n        [name]: e.target.value\n      })\n    } else if (type === \"checkbox\") {\n      this.setState({\n        [name]: e.target.checked,\n      })\n    }\n  }\n\n  formValidation = () => {\n    let username = false;\n    let surname = false;\n    let email = false;\n    let password = false;\n    let accept = false;\n    let allCorrect = false;\n\n    //validation username --> 8 characters minumum(without space)\n    if (this.state.username.length >= 8 && this.state.username.indexOf(' ') === -1) {\n      username = true;\n    }\n\n    //validation surname --> between 8 and 20 characters (without space)\n    if (this.state.surname.length >= 8 && this.state.surname.length <= 20 && this.state.surname.indexOf(' ') === -1) {\n      surname = true;\n    }\n\n    //validation email --> @ in input\n    if (this.state.email.indexOf('@') !== -1) {\n      email = true;\n    }\n\n    //validation password --> minimum 8 characters\n    if (this.state.password.length >= 8) {\n      password = true;\n    }\n\n    //validation accept checkbox\n    if (this.state.accept) {\n      accept = true;\n    }\n\n    if (username && surname && email && password && accept) {\n      allCorrect = true;\n    }\n\n    return ({\n      username,\n      surname,\n      email,\n      password,\n      accept,\n      allCorrect\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const validation = this.formValidation();\n    console.log(validation);\n\n    if (validation.allCorrect) {\n      this.setState({\n        username: '',\n        surname: '',\n        email: '',\n        password: '',\n        accept: false,\n        message: 'Registration complete!',\n        errors: {\n          username: false,\n          surname: false,\n          email: false,\n          password: false,\n          accept: false,\n        }\n      });\n      console.log('send');\n    } else {\n      this.setState({\n        errors: {\n          username: !validation.username,\n          surname: !validation.surname,\n          email: !validation.email,\n          password: !validation.password,\n          accept: !validation.accept,\n        }\n      })\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.message !== '') {\n      setTimeout(() => (\n        this.setState({\n          message: '',\n        })\n      ), 2000)\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n\n        <h1 className=\"app__title\">Simple React.js Form Validation</h1>\n\n        <ErrorMessages\n          errors={this.state.errors}\n          errorMessages={this.errorMessages}\n        />\n\n        <Form\n          state={this.state}\n          change={this.handleChange}\n          submit={this.handleSubmit}\n        />\n\n        <SendMessage\n          message={this.state.message}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}